-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2020-10-04 13:18:30 CEST
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



CREATE OR REPLACE TYPE adheader_typ AS OBJECT (
    header_name     VARCHAR2(256),
    creation_date   DATE,
    header_text     VARCHAR2(1024),
    logo            BLOB
) FINAL;
/

CREATE OR REPLACE TYPE cust_address_typ AS OBJECT (
    street_address   VARCHAR2(40),
    postal_code      VARCHAR2(10),
    city             VARCHAR2(30),
    state_province   VARCHAR2(10),
    country_id       CHAR(2)
) FINAL;
/

CREATE OR REPLACE TYPE message_typ AS OBJECT (
    subject   VARCHAR2(30),
    text      VARCHAR2(80)
) FINAL;
/

CREATE OR REPLACE TYPE order_event_typ AS OBJECT (
    order_id          NUMBER(12),
    product_id        NUMBER(6),
    customer_id       NUMBER(6),
    cust_first_name   VARCHAR2(20),
    cust_last_name    VARCHAR2(20),
    order_status      NUMBER(2),
    delivery_date     DATE
) FINAL;
/

CREATE OR REPLACE TYPE xmlsequencetype IS
    VARRAY(2147483647) OF unknown;
/

CREATE OR REPLACE TYPE sdo_elem_info_array IS
    VARRAY(1048576) OF unknown;
/

CREATE OR REPLACE TYPE sdo_ordinate_array IS
    VARRAY(1048576) OF unknown;
/

CREATE OR REPLACE TYPE textdoc_typ AS OBJECT (
    document_typ    VARCHAR2(32),
    formatted_doc   BLOB
) FINAL;
/

CREATE OR REPLACE TYPE phone_list_typ IS
    VARRAY(5) OF unknown;
/

CREATE OR REPLACE TYPE textdoc_tab IS
    TABLE OF unknown;
/

CREATE TABLE customers (
    customer_id         NUMBER(6) NOT NULL,
    cust_first_name     VARCHAR2(20 BYTE) NOT NULL,
    cust_last_name      VARCHAR2(20 BYTE) NOT NULL,
    cust_address        cust_address_typ,
    phone_numbers       phone_list_typ,
    nls_language        VARCHAR2(3 BYTE),
    nls_territory       VARCHAR2(30 BYTE),
    credit_limit        NUMBER(9, 2),
    cust_email          VARCHAR2(30 BYTE),
    account_mgr_id      NUMBER(6),
    cust_geo_location   sdo_geometryv1,
    date_of_birth       DATE,
    marital_status      VARCHAR2(20 BYTE),
    gender              VARCHAR2(1 BYTE),
    income_level        VARCHAR2(20 BYTE)
);

ALTER TABLE customers ADD CHECK ( customer_id > 0 );

ALTER TABLE customers ADD CHECK ( credit_limit <= 5000 );

ALTER TABLE customers ADD CONSTRAINT customers_pk PRIMARY KEY ( customer_id );


CREATE TABLE CUSTOMERS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,CUSTOMER_ID NUMBER (6) NOT NULL
 ,CUST_FIRST_NAME VARCHAR2 (20 BYTE) NOT NULL
 ,CUST_LAST_NAME VARCHAR2 (20 BYTE) NOT NULL
 ,CUST_ADDRESS CUST_ADDRESS_TYP
 ,PHONE_NUMBERS PHONE_LIST_TYP
 ,NLS_LANGUAGE VARCHAR2 (3 BYTE)
 ,NLS_TERRITORY VARCHAR2 (30 BYTE)
 ,CREDIT_LIMIT NUMBER (9,2)
 ,CUST_EMAIL VARCHAR2 (30 BYTE)
 ,ACCOUNT_MGR_ID NUMBER (6)
 ,CUST_GEO_LOCATION SDO_GEOMETRYv1
 ,DATE_OF_BIRTH DATE
 ,MARITAL_STATUS VARCHAR2 (20 BYTE)
 ,GENDER VARCHAR2 (1 BYTE)
 ,INCOME_LEVEL VARCHAR2 (20 BYTE)
 );

CREATE OR REPLACE TRIGGER CUSTOMERS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON CUSTOMERS for each row 
 Declare 
  rec CUSTOMERS_JN%ROWTYPE; 
  blank CUSTOMERS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CUSTOMER_ID := :NEW.CUSTOMER_ID; 
      rec.CUST_FIRST_NAME := :NEW.CUST_FIRST_NAME; 
      rec.CUST_LAST_NAME := :NEW.CUST_LAST_NAME; 
      rec.CUST_ADDRESS := :NEW.CUST_ADDRESS; 
      rec.PHONE_NUMBERS := :NEW.PHONE_NUMBERS; 
      rec.NLS_LANGUAGE := :NEW.NLS_LANGUAGE; 
      rec.NLS_TERRITORY := :NEW.NLS_TERRITORY; 
      rec.CREDIT_LIMIT := :NEW.CREDIT_LIMIT; 
      rec.CUST_EMAIL := :NEW.CUST_EMAIL; 
      rec.ACCOUNT_MGR_ID := :NEW.ACCOUNT_MGR_ID; 
      rec.CUST_GEO_LOCATION := :NEW.CUST_GEO_LOCATION; 
      rec.DATE_OF_BIRTH := :NEW.DATE_OF_BIRTH; 
      rec.MARITAL_STATUS := :NEW.MARITAL_STATUS; 
      rec.GENDER := :NEW.GENDER; 
      rec.INCOME_LEVEL := :NEW.INCOME_LEVEL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CUSTOMER_ID := :OLD.CUSTOMER_ID; 
      rec.CUST_FIRST_NAME := :OLD.CUST_FIRST_NAME; 
      rec.CUST_LAST_NAME := :OLD.CUST_LAST_NAME; 
      rec.CUST_ADDRESS := :OLD.CUST_ADDRESS; 
      rec.PHONE_NUMBERS := :OLD.PHONE_NUMBERS; 
      rec.NLS_LANGUAGE := :OLD.NLS_LANGUAGE; 
      rec.NLS_TERRITORY := :OLD.NLS_TERRITORY; 
      rec.CREDIT_LIMIT := :OLD.CREDIT_LIMIT; 
      rec.CUST_EMAIL := :OLD.CUST_EMAIL; 
      rec.ACCOUNT_MGR_ID := :OLD.ACCOUNT_MGR_ID; 
      rec.CUST_GEO_LOCATION := :OLD.CUST_GEO_LOCATION; 
      rec.DATE_OF_BIRTH := :OLD.DATE_OF_BIRTH; 
      rec.MARITAL_STATUS := :OLD.MARITAL_STATUS; 
      rec.GENDER := :OLD.GENDER; 
      rec.INCOME_LEVEL := :OLD.INCOME_LEVEL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into CUSTOMERS_JN VALUES rec; 
  END; 
  /CREATE TABLE departments (
    department_id     NUMBER(4) NOT NULL,
    department_name   VARCHAR2(30 BYTE) NOT NULL,
    manager_id        NUMBER(6),
    location_id       NUMBER(4)
);

COMMENT ON COLUMN departments.department_id IS
    'Primary key column of departments table.';

COMMENT ON COLUMN departments.department_name IS
    'A not null column that shows name of a department. Administration, &lt;br&gt;Marketing, Purchasing, Human Resources, Shipping, IT, Executive, Public &lt;br&gt;Relations, Sales, Finance, and Accounting. '
    ;

COMMENT ON COLUMN departments.manager_id IS
    'Manager_id of a department. Foreign key to employee_id column of employees table. The manager_id column of the employee table references this column.'
    ;

COMMENT ON COLUMN departments.location_id IS
    'Location id where a department is located. Foreign key to location_id column of locations table.';

ALTER TABLE departments ADD CONSTRAINT dept_id_pk PRIMARY KEY ( department_id );


CREATE TABLE DEPARTMENTS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,DEPARTMENT_ID NUMBER (4) NOT NULL
 ,DEPARTMENT_NAME VARCHAR2 (30 BYTE) NOT NULL
 ,MANAGER_ID NUMBER (6)
 ,LOCATION_ID NUMBER (4)
 );

CREATE OR REPLACE TRIGGER DEPARTMENTS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON DEPARTMENTS for each row 
 Declare 
  rec DEPARTMENTS_JN%ROWTYPE; 
  blank DEPARTMENTS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.DEPARTMENT_ID := :NEW.DEPARTMENT_ID; 
      rec.DEPARTMENT_NAME := :NEW.DEPARTMENT_NAME; 
      rec.MANAGER_ID := :NEW.MANAGER_ID; 
      rec.LOCATION_ID := :NEW.LOCATION_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.DEPARTMENT_ID := :OLD.DEPARTMENT_ID; 
      rec.DEPARTMENT_NAME := :OLD.DEPARTMENT_NAME; 
      rec.MANAGER_ID := :OLD.MANAGER_ID; 
      rec.LOCATION_ID := :OLD.LOCATION_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into DEPARTMENTS_JN VALUES rec; 
  END; 
  /CREATE TABLE employees (
    employee_id      NUMBER(6) NOT NULL,
    first_name       VARCHAR2(20 BYTE),
    last_name        VARCHAR2(25 BYTE) NOT NULL,
    email            VARCHAR2(25 BYTE) NOT NULL,
    phone_number     VARCHAR2(20 BYTE),
    hire_date        DATE NOT NULL,
    job_id           VARCHAR2(10 BYTE) NOT NULL,
    salary           NUMBER(8, 2),
    commission_pct   NUMBER(2, 2),
    manager_id       NUMBER(6),
    department_id    NUMBER(4)
);

ALTER TABLE employees ADD CHECK ( salary > 0 );

COMMENT ON COLUMN employees.employee_id IS
    'Primary key of employees table.';

COMMENT ON COLUMN employees.first_name IS
    'First name of the employee. A not null column.';

COMMENT ON COLUMN employees.last_name IS
    'Last name of the employee. A not null column.';

COMMENT ON COLUMN employees.email IS
    'Email id of the employee';

COMMENT ON COLUMN employees.phone_number IS
    'Phone number of the employee; includes country code and area code';

COMMENT ON COLUMN employees.hire_date IS
    'Date when the employee started on this job. A not null column.';

COMMENT ON COLUMN employees.job_id IS
    'Current job of the employee; foreign key to job_id column of the &lt;br&gt;jobs table. A not null column.';

COMMENT ON COLUMN employees.salary IS
    'Monthly salary of the employee. Must be greater &lt;br&gt;than zero (enforced by constraint emp_salary_min)';

COMMENT ON COLUMN employees.commission_pct IS
    'Commission percentage of the employee; Only employees in sales &lt;br&gt;department elgible for commission percentage';

COMMENT ON COLUMN employees.manager_id IS
    'Manager id of the employee; has same domain as manager_id in &lt;br&gt;departments table. Foreign key to employee_id column of employees table.&lt;br&gt;(useful for reflexive joins and CONNECT BY query)'
    ;

COMMENT ON COLUMN employees.department_id IS
    'Department id where employee works; foreign key to department_id &lt;br&gt;column of the departments table';

ALTER TABLE employees ADD CONSTRAINT emp_emp_id_pk PRIMARY KEY ( employee_id );

ALTER TABLE employees ADD CONSTRAINT emp_email_uk UNIQUE ( email );


CREATE TABLE EMPLOYEES_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,EMPLOYEE_ID NUMBER (6) NOT NULL
 ,FIRST_NAME VARCHAR2 (20 BYTE)
 ,LAST_NAME VARCHAR2 (25 BYTE) NOT NULL
 ,EMAIL VARCHAR2 (25 BYTE) NOT NULL
 ,PHONE_NUMBER VARCHAR2 (20 BYTE)
 ,HIRE_DATE DATE NOT NULL
 ,JOB_ID VARCHAR2 (10 BYTE) NOT NULL
 ,SALARY NUMBER (8,2)
 ,COMMISSION_PCT NUMBER (2,2)
 ,MANAGER_ID NUMBER (6)
 ,DEPARTMENT_ID NUMBER (4)
 );

CREATE OR REPLACE TRIGGER EMPLOYEES_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON EMPLOYEES for each row 
 Declare 
  rec EMPLOYEES_JN%ROWTYPE; 
  blank EMPLOYEES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.EMPLOYEE_ID := :NEW.EMPLOYEE_ID; 
      rec.FIRST_NAME := :NEW.FIRST_NAME; 
      rec.LAST_NAME := :NEW.LAST_NAME; 
      rec.EMAIL := :NEW.EMAIL; 
      rec.PHONE_NUMBER := :NEW.PHONE_NUMBER; 
      rec.HIRE_DATE := :NEW.HIRE_DATE; 
      rec.JOB_ID := :NEW.JOB_ID; 
      rec.SALARY := :NEW.SALARY; 
      rec.COMMISSION_PCT := :NEW.COMMISSION_PCT; 
      rec.MANAGER_ID := :NEW.MANAGER_ID; 
      rec.DEPARTMENT_ID := :NEW.DEPARTMENT_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.EMPLOYEE_ID := :OLD.EMPLOYEE_ID; 
      rec.FIRST_NAME := :OLD.FIRST_NAME; 
      rec.LAST_NAME := :OLD.LAST_NAME; 
      rec.EMAIL := :OLD.EMAIL; 
      rec.PHONE_NUMBER := :OLD.PHONE_NUMBER; 
      rec.HIRE_DATE := :OLD.HIRE_DATE; 
      rec.JOB_ID := :OLD.JOB_ID; 
      rec.SALARY := :OLD.SALARY; 
      rec.COMMISSION_PCT := :OLD.COMMISSION_PCT; 
      rec.MANAGER_ID := :OLD.MANAGER_ID; 
      rec.DEPARTMENT_ID := :OLD.DEPARTMENT_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into EMPLOYEES_JN VALUES rec; 
  END; 
  /CREATE TABLE job_history (
    employee_id     NUMBER(6) NOT NULL,
    start_date      DATE NOT NULL,
    end_date        DATE NOT NULL,
    job_id          VARCHAR2(10 BYTE) NOT NULL,
    department_id   NUMBER(4)
);

COMMENT ON COLUMN job_history.employee_id IS
    'A not null column in the complex primary key employee_id+start_date.&lt;br&gt;Foreign key to employee_id column of the employee table'
    ;

COMMENT ON COLUMN job_history.start_date IS
    'A not null column in the complex primary key employee_id+start_date. &lt;br&gt;Must be less than the end_date of the job_history table. (enforced by &lt;br&gt;constraint jhist_date_interval)'
    ;

COMMENT ON COLUMN job_history.end_date IS
    'Last day of the employee in this job role. A not null column. Must be &lt;br&gt;greater than the start_date of the job_history table. &lt;br&gt;(enforced by constraint jhist_date_interval)'
    ;

COMMENT ON COLUMN job_history.job_id IS
    'Job role in which the employee worked in the past; foreign key to &lt;br&gt;job_id column in the jobs table. A not null column.'
    ;

COMMENT ON COLUMN job_history.department_id IS
    'Department id in which the employee worked in the past; foreign key to deparment_id column in the departments table';

ALTER TABLE job_history ADD CONSTRAINT jhist_emp_id_st_date_pk PRIMARY KEY ( employee_id,
                                                                             start_date );


CREATE TABLE JOB_HISTORY_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,EMPLOYEE_ID NUMBER (6) NOT NULL
 ,START_DATE DATE NOT NULL
 ,END_DATE DATE NOT NULL
 ,JOB_ID VARCHAR2 (10 BYTE) NOT NULL
 ,DEPARTMENT_ID NUMBER (4)
 );

CREATE OR REPLACE TRIGGER JOB_HISTORY_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON JOB_HISTORY for each row 
 Declare 
  rec JOB_HISTORY_JN%ROWTYPE; 
  blank JOB_HISTORY_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.EMPLOYEE_ID := :NEW.EMPLOYEE_ID; 
      rec.START_DATE := :NEW.START_DATE; 
      rec.END_DATE := :NEW.END_DATE; 
      rec.JOB_ID := :NEW.JOB_ID; 
      rec.DEPARTMENT_ID := :NEW.DEPARTMENT_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.EMPLOYEE_ID := :OLD.EMPLOYEE_ID; 
      rec.START_DATE := :OLD.START_DATE; 
      rec.END_DATE := :OLD.END_DATE; 
      rec.JOB_ID := :OLD.JOB_ID; 
      rec.DEPARTMENT_ID := :OLD.DEPARTMENT_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into JOB_HISTORY_JN VALUES rec; 
  END; 
  /CREATE TABLE jobs (
    job_id       VARCHAR2(10 BYTE) NOT NULL,
    job_title    VARCHAR2(35 BYTE) NOT NULL,
    min_salary   NUMBER(6),
    max_salary   NUMBER(6)
);

COMMENT ON COLUMN jobs.job_id IS
    'Primary key of jobs table.';

COMMENT ON COLUMN jobs.job_title IS
    'A not null column that shows job title, e.g. AD_VP, FI_ACCOUNTANT';

COMMENT ON COLUMN jobs.min_salary IS
    'Minimum salary for a job title.';

COMMENT ON COLUMN jobs.max_salary IS
    'Maximum salary for a job title';

ALTER TABLE jobs ADD CONSTRAINT job_id_pk PRIMARY KEY ( job_id );


CREATE TABLE JOBS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,JOB_ID VARCHAR2 (10 BYTE) NOT NULL
 ,JOB_TITLE VARCHAR2 (35 BYTE) NOT NULL
 ,MIN_SALARY NUMBER (6)
 ,MAX_SALARY NUMBER (6)
 );

CREATE OR REPLACE TRIGGER JOBS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON JOBS for each row 
 Declare 
  rec JOBS_JN%ROWTYPE; 
  blank JOBS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.JOB_ID := :NEW.JOB_ID; 
      rec.JOB_TITLE := :NEW.JOB_TITLE; 
      rec.MIN_SALARY := :NEW.MIN_SALARY; 
      rec.MAX_SALARY := :NEW.MAX_SALARY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.JOB_ID := :OLD.JOB_ID; 
      rec.JOB_TITLE := :OLD.JOB_TITLE; 
      rec.MIN_SALARY := :OLD.MIN_SALARY; 
      rec.MAX_SALARY := :OLD.MAX_SALARY; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into JOBS_JN VALUES rec; 
  END; 
  /CREATE TABLE orders (
    order_id       NUMBER(12) NOT NULL,
    order_date     TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,
    order_mode     VARCHAR2(8 BYTE),
    customer_id    NUMBER(6) NOT NULL,
    order_status   NUMBER(2),
    order_total    NUMBER(8, 2),
    sales_rep_id   NUMBER(6),
    promotion_id   NUMBER(6)
);

ALTER TABLE orders
    ADD CHECK ( order_mode IN (
        'direct',
        'online'
    ) );

ALTER TABLE orders ADD CHECK ( order_total >= 0 );

ALTER TABLE orders ADD CONSTRAINT order_pk PRIMARY KEY ( order_id );


CREATE TABLE ORDERS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ORDER_ID NUMBER (12) NOT NULL
 ,ORDER_DATE TIMESTAMP WITH LOCAL TIME ZONE NOT NULL
 ,ORDER_MODE VARCHAR2 (8 BYTE)
 ,CUSTOMER_ID NUMBER (6) NOT NULL
 ,ORDER_STATUS NUMBER (2)
 ,ORDER_TOTAL NUMBER (8,2)
 ,SALES_REP_ID NUMBER (6)
 ,PROMOTION_ID NUMBER (6)
 );

CREATE OR REPLACE TRIGGER ORDERS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON ORDERS for each row 
 Declare 
  rec ORDERS_JN%ROWTYPE; 
  blank ORDERS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ORDER_ID := :NEW.ORDER_ID; 
      rec.ORDER_DATE := :NEW.ORDER_DATE; 
      rec.ORDER_MODE := :NEW.ORDER_MODE; 
      rec.CUSTOMER_ID := :NEW.CUSTOMER_ID; 
      rec.ORDER_STATUS := :NEW.ORDER_STATUS; 
      rec.ORDER_TOTAL := :NEW.ORDER_TOTAL; 
      rec.SALES_REP_ID := :NEW.SALES_REP_ID; 
      rec.PROMOTION_ID := :NEW.PROMOTION_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ORDER_ID := :OLD.ORDER_ID; 
      rec.ORDER_DATE := :OLD.ORDER_DATE; 
      rec.ORDER_MODE := :OLD.ORDER_MODE; 
      rec.CUSTOMER_ID := :OLD.CUSTOMER_ID; 
      rec.ORDER_STATUS := :OLD.ORDER_STATUS; 
      rec.ORDER_TOTAL := :OLD.ORDER_TOTAL; 
      rec.SALES_REP_ID := :OLD.SALES_REP_ID; 
      rec.PROMOTION_ID := :OLD.PROMOTION_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ORDERS_JN VALUES rec; 
  END; 
  /ALTER TABLE customers
    ADD CONSTRAINT customers_account_manager_fk FOREIGN KEY ( account_mgr_id )
        REFERENCES employees ( employee_id )
            ON DELETE SET NULL;

ALTER TABLE employees
    ADD CONSTRAINT dept_mgr_fk FOREIGN KEY ( department_id )
        REFERENCES departments ( department_id )
            ON DELETE SET NULL;

ALTER TABLE departments
    ADD CONSTRAINT dept_mgr_fk FOREIGN KEY ( manager_id )
        REFERENCES employees ( employee_id )
            ON DELETE SET NULL;

ALTER TABLE employees
    ADD CONSTRAINT emp_job_fk FOREIGN KEY ( job_id )
        REFERENCES jobs ( job_id );

ALTER TABLE employees
    ADD CONSTRAINT emp_manager_fk FOREIGN KEY ( manager_id )
        REFERENCES employees ( employee_id )
            ON DELETE SET NULL;

ALTER TABLE job_history
    ADD CONSTRAINT jhist_dept_fk FOREIGN KEY ( department_id )
        REFERENCES departments ( department_id )
            ON DELETE SET NULL;

ALTER TABLE job_history
    ADD CONSTRAINT jhist_emp_fk FOREIGN KEY ( employee_id )
        REFERENCES employees ( employee_id );

ALTER TABLE job_history
    ADD CONSTRAINT jhist_job_fk FOREIGN KEY ( job_id )
        REFERENCES jobs ( job_id );

ALTER TABLE orders
    ADD CONSTRAINT orders_customer_id_fk FOREIGN KEY ( customer_id )
        REFERENCES customers ( customer_id );

ALTER TABLE orders
    ADD CONSTRAINT orders_sales_rep_fk FOREIGN KEY ( sales_rep_id )
        REFERENCES employees ( employee_id )
            ON DELETE SET NULL;



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                             0
-- ALTER TABLE                             22
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   5
-- CREATE STRUCTURED TYPE                   5
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
