-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2020-10-04 16:50:15 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE user hr identified by account unlock 
;

CREATE USER oe IDENTIFIED BY profile DEFAULT 
    ACCOUNT UNLOCK 
;

GRANT
    QUERY REWRITE,
    UNLIMITED TABLESPACE,
    CREATE SYNONYM,
    CREATE MATERIALIZED VIEW,
    CREATE DATABASE LINK,
    CREATE VIEW,
    CREATE SESSION
TO oe;

CREATE user sys identified by account unlock 
;

CREATE OR REPLACE TYPE product_information_typ;
/

CREATE OR REPLACE TYPE customer_typ;
/

CREATE OR REPLACE TYPE xdb$raw_list_t IS
    VARRAY(1000) OF unknown;
/

CREATE OR REPLACE TYPE action_t AS OBJECT (
    sys_xdbpd$      xdb$raw_list_t,
    actioned_by     VARCHAR2(10),
    date_actioned   DATE
) FINAL;
/

CREATE OR REPLACE TYPE action_v IS
    VARRAY(4) OF unknown;
/

CREATE OR REPLACE TYPE actions_t AS OBJECT (
    sys_xdbpd$   xdb$raw_list_t,
    action       action_v
) NOT FINAL;
/

CREATE OR REPLACE TYPE category_typ AS OBJECT (
    category_name          VARCHAR2(50),
    category_description   VARCHAR2(1000),
    category_id            NUMBER(2),
    parent_category_id     NUMBER(2),
    MEMBER FUNCTION category_describe RETURN VARCHAR2
) NOT FINAL NOT INSTANTIABLE;
/

CREATE OR REPLACE TYPE subcategory_ref_list_typ IS
    TABLE OF unknown;
/

CREATE OR REPLACE TYPE composite_category_typ UNDER category_typ (
    subcategory_ref_list subcategory_ref_list_typ,
    MEMBER FUNCTION category_describe RETURN VARCHAR2
) NOT FINAL;
/

CREATE OR REPLACE TYPE catalog_typ UNDER composite_category_typ (
    MEMBER FUNCTION getcatalogname RETURN VARCHAR2,
    MEMBER FUNCTION category_describe RETURN VARCHAR2
) FINAL;
/

CREATE OR REPLACE TYPE cust_address_typ AS OBJECT (
    street_address   VARCHAR2(40),
    postal_code      VARCHAR2(10),
    city             VARCHAR2(30),
    state_province   VARCHAR2(10),
    country_id       CHAR(2)
) FINAL;
/

CREATE OR REPLACE TYPE phone_list_typ IS
    VARRAY(5) OF unknown;
/

CREATE OR REPLACE TYPE order_list_typ IS
    TABLE OF unknown;
/

CREATE OR REPLACE TYPE customer_typ AS OBJECT (
    customer_id       NUMBER(6),
    cust_first_name   VARCHAR2(20),
    cust_last_name    VARCHAR2(20),
    cust_address      cust_address_typ,
    phone_numbers     phone_list_typ,
    nls_language      VARCHAR2(3),
    nls_territory     VARCHAR2(30),
    credit_limit      NUMBER(9, 2),
    cust_email        VARCHAR2(30),
    cust_orders       order_list_typ
) NOT FINAL;
/

CREATE OR REPLACE TYPE corporate_customer_typ UNDER customer_typ (
    account_mgr_id NUMBER(6)
) FINAL;
/

CREATE OR REPLACE TYPE warehouse_typ AS OBJECT (
    warehouse_id     NUMBER(3),
    warehouse_name   VARCHAR2(35),
    location_id      NUMBER(4)
) FINAL;
/

CREATE OR REPLACE TYPE inventory_typ AS OBJECT (
    product_id         NUMBER(6),
    warehouse          warehouse_typ,
    quantity_on_hand   NUMBER(8)
) FINAL;
/

CREATE OR REPLACE TYPE product_ref_list_typ IS
    TABLE OF unknown;
/

CREATE OR REPLACE TYPE leaf_category_typ UNDER category_typ (
    product_ref_list product_ref_list_typ,
    MEMBER FUNCTION category_describe RETURN VARCHAR2
) FINAL;
/

CREATE OR REPLACE TYPE part_t AS OBJECT (
    sys_xdbpd$    xdb$raw_list_t,
    part_number   VARCHAR2(14),
    quantity      NUMBER(8, 4),
    unitprice     NUMBER(12, 2)
) NOT FINAL;
/

CREATE OR REPLACE TYPE lineitem_t AS OBJECT (
    sys_xdbpd$    xdb$raw_list_t,
    itemnumber    NUMBER(38),
    description   VARCHAR2(256),
    part          part_t
) NOT FINAL;
/

CREATE OR REPLACE TYPE lineitem_v IS
    VARRAY(2147483647) OF unknown;
/

CREATE OR REPLACE TYPE lineitems_t AS OBJECT (
    sys_xdbpd$   xdb$raw_list_t,
    lineitem     lineitem_v
) NOT FINAL;
/

CREATE OR REPLACE TYPE order_item_typ AS OBJECT (
    order_id       NUMBER(12),
    line_item_id   NUMBER(3),
    unit_price     NUMBER(8, 2),
    quantity       NUMBER(8),
    product_ref    REF product_information_typ
) FINAL;
/

CREATE OR REPLACE TYPE order_item_list_typ IS
    TABLE OF unknown;
/

CREATE OR REPLACE TYPE order_typ AS OBJECT (
    order_id          NUMBER(12),
    order_mode        VARCHAR2(8),
    customer_ref      REF customer_typ,
    order_status      NUMBER(2),
    order_total       NUMBER(8, 2),
    sales_rep_id      NUMBER(6),
    order_item_list   order_item_list_typ
) FINAL;
/

CREATE OR REPLACE TYPE inventory_list_typ IS
    TABLE OF unknown;
/

CREATE OR REPLACE TYPE product_information_typ AS OBJECT (
    product_id            NUMBER(6),
    product_name          VARCHAR2(50),
    product_description   VARCHAR2(2000),
    category_id           NUMBER(2),
    weight_class          NUMBER(1),
    warranty_period       INTERVAL YEAR TO MONTH,
    supplier_id           NUMBER(6),
    product_status        VARCHAR2(20),
    list_price            NUMBER(8, 2),
    min_price             NUMBER(8, 2),
    catalog_url           VARCHAR2(50),
    inventory_list        inventory_list_typ
) FINAL;
/

CREATE OR REPLACE TYPE rejection_t AS OBJECT (
    sys_xdbpd$        xdb$raw_list_t,
    rejected_by       VARCHAR2(10),
    date_rejected     DATE,
    reason_rejected   VARCHAR2(2048)
) NOT FINAL;
/

CREATE OR REPLACE TYPE shipping_instructions_t AS OBJECT (
    sys_xdbpd$        xdb$raw_list_t,
    ship_to_name      VARCHAR2(20),
    ship_to_address   VARCHAR2(256),
    ship_to_phone     VARCHAR2(24)
) NOT FINAL;
/

CREATE OR REPLACE TYPE purchaseorder_t AS OBJECT (
    sys_xdbpd$              xdb$raw_list_t,
    reference               VARCHAR2(30),
    actions                 actions_t,
    rejection               rejection_t,
    requestor               VARCHAR2(128),
    userid                  VARCHAR2(10),
    cost_center             VARCHAR2(4),
    shipping_instructions   shipping_instructions_t,
    special_instructions    VARCHAR2(2048),
    lineitems               lineitems_t
) NOT FINAL;
/

CREATE OR REPLACE TYPE sdo_elem_info_array IS
    VARRAY(1048576) OF unknown;
/

CREATE OR REPLACE TYPE sdo_ordinate_array IS
    VARRAY(1048576) OF unknown;
/

CREATE SEQUENCE oe.orders_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE;

CREATE OR REPLACE FUNCTION oe.get_phone_number_f;  (p_in INTEGER, p_phonelist phone_list_typ)&lt;br&gt;RETURN VARCHAR2 AS&lt;br&gt;  TYPE phone_list IS VARRAY(5) OF VARCHAR2(25);&lt;br&gt;  phone_out varchar2(25) := null;&lt;br&gt;  v_size INTEGER;&lt;br&gt;BEGIN&lt;br&gt;    IF p_phonelist.FIRST IS NULL OR&lt;br&gt;       p_in &gt; ( p_phonelist.last + 1 ) - p_phonelist.first
    then&lt;
    br&gt;
    RETURN phone_out;
    &lt;
    br&gt;
    else&lt;
    br&gt;
    phone_out := p_phonelist(p_in);
    &lt;
    br&gt;
    RETURN phone_out;
    &lt;
    br&gt;
END IF;&lt;br&gt;
END;
/

CREATE TABLE oe.categories_tab OF category_typ (
    PRIMARY KEY ( category_id )
)
LOGGING
    ENABLE ROW MOVEMENT;

CREATE TABLE oe.customers (
    customer_id         NUMBER(6) NOT NULL,
    cust_first_name     VARCHAR2(20 BYTE) NOT NULL,
    cust_last_name      VARCHAR2(20 BYTE) NOT NULL,
    cust_address        cust_address_typ,
    phone_numbers       phone_list_typ,
    nls_language        VARCHAR2(3 BYTE),
    nls_territory       VARCHAR2(30 BYTE),
    credit_limit        NUMBER(9, 2),
    cust_email          VARCHAR2(30 BYTE),
    account_mgr_id      NUMBER(6),
    cust_geo_location   NUMBER(14, 4),
    date_of_birth       DATE,
    marital_status      VARCHAR2(20 BYTE),
    gender              VARCHAR2(1 BYTE),
    income_level        VARCHAR2(20 BYTE)
)
LOGGING
    ENABLE ROW MOVEMENT;

ALTER TABLE oe.customers ADD CONSTRAINT customer_id_min CHECK ( customer_id > 0 );

ALTER TABLE oe.customers ADD CONSTRAINT customer_credit_limit_max CHECK ( credit_limit <= 5000 );

COMMENT ON COLUMN oe.customers.customer_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.customers.cust_first_name IS
    'NOT NULL constraint.';

COMMENT ON COLUMN oe.customers.cust_last_name IS
    'NOT NULL constraint.';

COMMENT ON COLUMN oe.customers.cust_address IS
    'Object column of type address_typ.';

COMMENT ON COLUMN oe.customers.phone_numbers IS
    'Varray column of type phone_list_typ';

COMMENT ON COLUMN oe.customers.credit_limit IS
    'Check constraint.';

COMMENT ON COLUMN oe.customers.account_mgr_id IS
    'References hr.employees.employee_id.';

COMMENT ON COLUMN oe.customers.cust_geo_location IS
    'SDO (spatial) column.';

CREATE INDEX oe.cust_upper_name_ix ON oe.customers ( upper ( &quot;CUST_LAST_NAME&quot;), upper ( &quot;cust_first_name&quot;) )
logging;

CREATE INDEX oe.cust_account_manager_ix ON
    oe.customers (
        account_mgr_id
    ASC )
        LOGGING;

CREATE INDEX oe.cust_lname_ix ON
    oe.customers (
        cust_last_name
    ASC )
        LOGGING;

CREATE INDEX oe.cust_email_ix ON
    oe.customers (
        cust_email
    ASC )
        LOGGING;

ALTER TABLE oe.customers ADD CONSTRAINT customers_pk PRIMARY KEY ( customer_id );

CREATE TABLE oe.inventories (
    product_id         NUMBER(6) NOT NULL,
    warehouse_id       NUMBER(3) NOT NULL,
    quantity_on_hand   NUMBER(8) NOT NULL
)
LOGGING
    ENABLE ROW MOVEMENT;

COMMENT ON COLUMN oe.inventories.product_id IS
    'Part of concatenated primary key, references product_information.product_id.';

COMMENT ON COLUMN oe.inventories.warehouse_id IS
    'Part of concatenated primary key, references warehouses.warehouse_id.';

CREATE INDEX oe.inventory_ix ON
    oe.inventories (
        warehouse_id
    ASC,
        product_id
    ASC )
        LOGGING;

CREATE INDEX oe.inv_product_ix ON
    oe.inventories (
        product_id
    ASC )
        LOGGING;

ALTER TABLE oe.inventories ADD CONSTRAINT inventory_pk PRIMARY KEY ( product_id,
                                                                     warehouse_id );

CREATE TABLE oe.order_items (
    order_id       NUMBER(12) NOT NULL,
    line_item_id   NUMBER(3) NOT NULL,
    product_id     NUMBER(6) NOT NULL,
    unit_price     NUMBER(8, 2),
    quantity       NUMBER(8)
)
LOGGING
    ENABLE ROW MOVEMENT;

COMMENT ON COLUMN oe.order_items.order_id IS
    'Part of concatenated primary key, references orders.order_id.';

COMMENT ON COLUMN oe.order_items.line_item_id IS
    'Part of concatenated primary key.';

COMMENT ON COLUMN oe.order_items.product_id IS
    'References product_information.product_id.';

CREATE UNIQUE INDEX oe.order_items_uk ON
    oe.order_items (
        order_id
    ASC,
        product_id
    ASC )
        LOGGING;

CREATE INDEX oe.item_order_ix ON
    oe.order_items (
        order_id
    ASC )
        LOGGING;

CREATE INDEX oe.item_product_ix ON
    oe.order_items (
        product_id
    ASC )
        LOGGING;

ALTER TABLE oe.order_items ADD CONSTRAINT order_items_pk PRIMARY KEY ( order_id,
                                                                       line_item_id );

CREATE TABLE oe.orders (
    order_id       NUMBER(12) NOT NULL,
    order_date     TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,
    order_mode     VARCHAR2(8 BYTE),
    customer_id    NUMBER(6) NOT NULL,
    order_status   NUMBER(2),
    order_total    NUMBER(8, 2),
    sales_rep_id   NUMBER(6),
    promotion_id   NUMBER(6)
)
LOGGING
    ENABLE ROW MOVEMENT;

ALTER TABLE oe.orders
    ADD CONSTRAINT order_mode_lov CHECK ( order_mode IN (
        'direct',
        'online'
    ) );

ALTER TABLE oe.orders ADD CONSTRAINT order_total_min CHECK ( order_total >= 0 );

COMMENT ON COLUMN oe.orders.order_id IS
    'PRIMARY KEY column.';

COMMENT ON COLUMN oe.orders.order_date IS
    'TIMESTAMP WITH LOCAL TIME ZONE column, NOT NULL constraint.';

COMMENT ON COLUMN oe.orders.order_mode IS
    'CHECK constraint.';

COMMENT ON COLUMN oe.orders.order_status IS
    '0: Not fully entered, 1: Entered, 2: Canceled - bad credit, -&lt;br&gt;3: Canceled - by customer, 4: Shipped - whole order, -&lt;br&gt;5: Shipped - replacement items, 6: Shipped - backlog on items, -&lt;br&gt;7: Shipped - special delivery, 8: Shipped - billed, 9: Shipped - payment plan,-&lt;br&gt;10: Shipped - paid'
    ;

COMMENT ON COLUMN oe.orders.order_total IS
    'CHECK constraint.';

COMMENT ON COLUMN oe.orders.sales_rep_id IS
    'References hr.employees.employee_id.';

COMMENT ON COLUMN oe.orders.promotion_id IS
    'Sales promotion ID. Used in SH schema';

CREATE INDEX oe.ord_sales_rep_ix ON
    oe.orders (
        sales_rep_id
    ASC )
        LOGGING;

CREATE INDEX oe.ord_customer_ix ON
    oe.orders (
        customer_id
    ASC )
        LOGGING;

CREATE INDEX oe.ord_order_date_ix ON
    oe.orders (
        order_date
    ASC )
        LOGGING;

ALTER TABLE oe.orders ADD CONSTRAINT order_pk PRIMARY KEY ( order_id );

CREATE TABLE oe.product_descriptions (
    product_id               NUMBER(6) NOT NULL,
    language_id              VARCHAR2(3 BYTE) NOT NULL,
    translated_name          NVARCHAR2(50) NOT NULL,
    translated_description   NVARCHAR2(2000) NOT NULL
)
LOGGING
    ENABLE ROW MOVEMENT;

COMMENT ON COLUMN oe.product_descriptions.product_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.product_descriptions.language_id IS
    'Primary key column.';

CREATE UNIQUE INDEX oe.prd_desc_pk ON
    oe.product_descriptions (
        product_id
    ASC,
        language_id
    ASC )
        LOGGING;

CREATE INDEX oe.prod_name_ix ON
    oe.product_descriptions (
        translated_name
    ASC )
        LOGGING;

ALTER TABLE oe.product_descriptions ADD CONSTRAINT product_descriptions_pk PRIMARY KEY ( product_id,
                                                                                         language_id );

CREATE TABLE oe.product_information (
    product_id            NUMBER(6) NOT NULL,
    product_name          VARCHAR2(50 BYTE),
    product_description   VARCHAR2(2000 BYTE),
    category_id           NUMBER(2),
    weight_class          NUMBER(1),
    warranty_period       INTERVAL YEAR TO MONTH,
    supplier_id           NUMBER(6),
    product_status        VARCHAR2(20 BYTE),
    list_price            NUMBER(8, 2),
    min_price             NUMBER(8, 2),
    catalog_url           VARCHAR2(50 BYTE)
)
LOGGING
    ENABLE ROW MOVEMENT;

ALTER TABLE oe.product_information
    ADD CONSTRAINT product_status_lov CHECK ( product_status IN (
        'orderable',
        'planned',
        'under development',
        'obsolete'
    ) );

COMMENT ON COLUMN oe.product_information.product_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.product_information.product_description IS
    'Primary language description corresponding to translated_description in&lt;br&gt;oe.product_descriptions, added to provide non-NLS text columns for OC views&lt;br&gt;to accss.'
    ;

COMMENT ON COLUMN oe.product_information.category_id IS
    'Low cardinality column, can be used for bitmap index.&lt;br&gt;Schema SH uses it as foreign key';

COMMENT ON COLUMN oe.product_information.weight_class IS
    'Low cardinality column, can be used for bitmap index.';

COMMENT ON COLUMN oe.product_information.warranty_period IS
    'INTERVAL YEAER TO MONTH column, low cardinality, can be used for bitmap&lt;br&gt;index.';

COMMENT ON COLUMN oe.product_information.supplier_id IS
    'Offers possibility of extensions outside Common Schema.';

COMMENT ON COLUMN oe.product_information.product_status IS
    'Check constraint. Appropriate for complex rules, such as &amp;quot;All products in&lt;br&gt;status PRODUCTION must have at least one inventory entry.&amp;quot; Also appropriate&lt;br&gt;for a trigger auditing status change.'
    ;

CREATE INDEX oe.prod_supplier_ix ON
    oe.product_information (
        supplier_id
    ASC )
        LOGGING;

ALTER TABLE oe.product_information ADD CONSTRAINT product_information_pk PRIMARY KEY ( product_id );

CREATE TABLE oe.promotions (
    promo_id     NUMBER(6) NOT NULL,
    promo_name   VARCHAR2(20 BYTE)
)
LOGGING
    ENABLE ROW MOVEMENT;

ALTER TABLE oe.promotions ADD CONSTRAINT promo_id_pk PRIMARY KEY ( promo_id );

CREATE TABLE oe.purchaseorder

) logging enable row movement 
;

ALTER TABLE oe.purchaseorder ADD CONSTRAINT oid_pk_purchaseorder PRIMARY KEY ( oid );

CREATE TABLE oe.warehouses (
    warehouse_id      NUMBER(3) NOT NULL,
    warehouse_spec    XMLTYPE,
    warehouse_name    VARCHAR2(35 BYTE),
    location_id       NUMBER(4),
    wh_geo_location   NUMBER(14, 4)
)
LOGGING
    XMLTYPE COLUMN warehouse_spec STORE AS BINARY XML (
        STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 BUFFER_POOL DEFAULT )
        RETENTION
        ENABLE STORAGE IN ROW
        CACHE
    ) ENABLE ROW MOVEMENT;

COMMENT ON COLUMN oe.warehouses.warehouse_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.warehouses.wh_geo_location IS
    'Primary key column, references hr.locations.location_id.';

CREATE INDEX oe.whs_location_ix ON
    oe.warehouses (
        location_id
    ASC )
        LOGGING;

ALTER TABLE oe.warehouses ADD CONSTRAINT warehouses_pk PRIMARY KEY ( warehouse_id );

ALTER TABLE oe.inventories
    ADD CONSTRAINT inventories_product_id_fk FOREIGN KEY ( product_id )
        REFERENCES oe.product_information ( product_id )
    NOT DEFERRABLE;

ALTER TABLE oe.inventories
    ADD CONSTRAINT inventories_warehouses_fk FOREIGN KEY ( warehouse_id )
        REFERENCES oe.warehouses ( warehouse_id )
    NOT DEFERRABLE;

ALTER TABLE oe.order_items
    ADD CONSTRAINT order_items_order_id_fk FOREIGN KEY ( order_id )
        REFERENCES oe.orders ( order_id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE oe.order_items
    ADD CONSTRAINT order_items_product_id_fk FOREIGN KEY ( product_id )
        REFERENCES oe.product_information ( product_id )
    NOT DEFERRABLE;

ALTER TABLE oe.orders
    ADD CONSTRAINT orders_customer_id_fk FOREIGN KEY ( customer_id )
        REFERENCES oe.customers ( customer_id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE oe.product_descriptions
    ADD CONSTRAINT pd_product_id_fk FOREIGN KEY ( product_id )
        REFERENCES oe.product_information ( product_id )
    NOT DEFERRABLE;

CREATE OR REPLACE VIEW OE.ACCOUNT_MANAGERS  AS
&lt;br&gt;SELECT          c.account_mgr_id                ACCT_MGR,&lt;br&gt;                cr.region_id                    REGION,&lt;br&gt;                c.cust_address.country_id       COUNTRY,&lt;br&gt;                c.cust_address.state_province   PROVINCE,&lt;br&gt;                count(*)                        NUM_CUSTOMERS&lt;br&gt;FROM            customers c, countries cr&lt;br&gt;WHERE           c.cust_address.country_id = cr.country_id&lt;br&gt;GROUP BY ROLLUP (c.account_mgr_id,&lt;br&gt;                 cr.region_id,&lt;br&gt;                 c.cust_address.country_id,&lt;br&gt;                 c.cust_address.state_province) 
;

CREATE OR REPLACE VIEW OE.BOMBAY_INVENTORY  AS
&lt;br&gt;SELECT p.product_id&lt;br&gt;,      p.product_name&lt;br&gt;,      i.quantity_on_hand&lt;br&gt;FROM   inventories i&lt;br&gt;,      warehouses  w&lt;br&gt;,      products    p&lt;br&gt;WHERE  p.product_id = i.product_id&lt;br&gt;AND    i.warehouse_id = w.warehouse_id&lt;br&gt;AND    w.warehouse_name = &apos;Bombay&apos 
;

CREATE OR REPLACE VIEW OE.CUSTOMERS_VIEW  AS
&lt;br&gt;SELECT&lt;br&gt;  c.customer_id,&lt;br&gt;  c.cust_first_name,&lt;br&gt;  c.cust_last_name,&lt;br&gt;  c.cust_address.street_address street_address,&lt;br&gt;  c.cust_address.postal_code postal_code,&lt;br&gt;  c.cust_address.city city,&lt;br&gt;  c.cust_address.state_province state_province,&lt;br&gt;  co.country_id,&lt;br&gt;  co.country_name,&lt;br&gt;  co.region_id,&lt;br&gt;  c.nls_language,&lt;br&gt;  c.nls_territory,&lt;br&gt;  c.credit_limit,&lt;br&gt;  c.cust_email,&lt;br&gt;  substr(get_phone_number_f(1,phone_numbers),1,25) Primary_Phone_number,&lt;br&gt;  substr(get_phone_number_f(2,phone_numbers),1,25) Phone_number_2,&lt;br&gt;  substr(get_phone_number_f(3,phone_numbers),1,25) Phone_number_3,&lt;br&gt;  substr(get_phone_number_f(4,phone_numbers),1,25) Phone_number_4,&lt;br&gt;  substr(get_phone_number_f(5,phone_numbers),1,25) Phone_number_5,&lt;br&gt;  c.account_mgr_id,&lt;br&gt;  c.cust_geo_location.sdo_gtype location_gtype,&lt;br&gt;  c.cust_geo_location.sdo_srid location_srid,&lt;br&gt;  c.cust_geo_location.sdo_point.x location_x,&lt;br&gt;  c.cust_geo_location.sdo_point.y location_y,&lt;br&gt;  c.cust_geo_location.sdo_point.z location_z&lt;br&gt;FROM&lt;br&gt;  countries co,&lt;br&gt;  customers c&lt;br&gt;WHERE&lt;br&gt;  c.cust_address.country_id = co.country_id(+) 
;

CREATE OR REPLACE VIEW OE.OC_CUSTOMERS
 OF CUSTOMER_TYP WITH OBJECT IDENTIFIER ( customer_id )   AS
;  ( CUSTOMER_ID,&lt;br&gt;    CUST_FIRST_NAME,&lt;br&gt;    CUST_LAST_NAME,&lt;br&gt;    CUST_ADDRESS,&lt;br&gt;    PHONE_NUMBERS,&lt;br&gt;    NLS_LANGUAGE,&lt;br&gt;    NLS_TERRITORY,&lt;br&gt;    CREDIT_LIMIT,&lt;br&gt;    CUST_EMAIL,&lt;br&gt;    CUST_ORDERS )&lt;br&gt; AS SELECT&lt;br&gt;    CUSTOMER_ID CUSTOMER_ID,&lt;br&gt;    CUST_FIRST_NAME CUST_FIRST_NAME,&lt;br&gt;    CUST_LAST_NAME CUST_LAST_NAME,&lt;br&gt;    CUST_ADDRESS CUST_ADDRESS,&lt;br&gt;    PHONE_NUMBERS PHONE_NUMBERS,&lt;br&gt;    NLS_LANGUAGE NLS_LANGUAGE,&lt;br&gt;    NLS_TERRITORY NLS_TERRITORY,&lt;br&gt;    CREDIT_LIMIT CREDIT_LIMIT,&lt;br&gt;    CUST_EMAIL CUST_EMAIL,&lt;br&gt;    CUST_ORDERS CUST_ORDERS 
;

CREATE OR REPLACE VIEW OE.OC_CORPORATE_CUSTOMERS
 OF CORPORATE_CUSTOMER_TYP UNDER OE.OC_CUSTOMERS   AS
;  ( CUSTOMER_ID,&lt;br&gt;    CUST_FIRST_NAME,&lt;br&gt;    CUST_LAST_NAME,&lt;br&gt;    CUST_ADDRESS,&lt;br&gt;    PHONE_NUMBERS,&lt;br&gt;    NLS_LANGUAGE,&lt;br&gt;    NLS_TERRITORY,&lt;br&gt;    CREDIT_LIMIT,&lt;br&gt;    CUST_EMAIL,&lt;br&gt;    CUST_ORDERS,&lt;br&gt;    ACCOUNT_MGR_ID )&lt;br&gt; AS SELECT&lt;br&gt;    CUSTOMER_ID CUSTOMER_ID,&lt;br&gt;    CUST_FIRST_NAME CUST_FIRST_NAME,&lt;br&gt;    CUST_LAST_NAME CUST_LAST_NAME,&lt;br&gt;    CUST_ADDRESS CUST_ADDRESS,&lt;br&gt;    PHONE_NUMBERS PHONE_NUMBERS,&lt;br&gt;    NLS_LANGUAGE NLS_LANGUAGE,&lt;br&gt;    NLS_TERRITORY NLS_TERRITORY,&lt;br&gt;    CREDIT_LIMIT CREDIT_LIMIT,&lt;br&gt;    CUST_EMAIL CUST_EMAIL,&lt;br&gt;    CUST_ORDERS CUST_ORDERS,&lt;br&gt;    ACCOUNT_MGR_ID ACCOUNT_MGR_ID 
;

CREATE OR REPLACE VIEW OE.OC_INVENTORIES
 OF INVENTORY_TYP WITH OBJECT IDENTIFIER ( product_id )   AS
;  ( PRODUCT_ID,&lt;br&gt;    WAREHOUSE,&lt;br&gt;    QUANTITY_ON_HAND )&lt;br&gt; AS SELECT&lt;br&gt;    PRODUCT_ID PRODUCT_ID,&lt;br&gt;    WAREHOUSE WAREHOUSE,&lt;br&gt;    QUANTITY_ON_HAND QUANTITY_ON_HAND 
;

CREATE OR REPLACE VIEW OE.OC_ORDERS
 OF ORDER_TYP WITH OBJECT IDENTIFIER ( order_id )   AS
;  ( ORDER_ID,&lt;br&gt;    ORDER_MODE,&lt;br&gt;    CUSTOMER_REF,&lt;br&gt;    ORDER_STATUS,&lt;br&gt;    ORDER_TOTAL,&lt;br&gt;    SALES_REP_ID,&lt;br&gt;    ORDER_ITEM_LIST )&lt;br&gt; AS SELECT&lt;br&gt;    ORDER_ID ORDER_ID,&lt;br&gt;    ORDER_MODE ORDER_MODE,&lt;br&gt;    CUSTOMER_REF CUSTOMER_REF,&lt;br&gt;    ORDER_STATUS ORDER_STATUS,&lt;br&gt;    ORDER_TOTAL ORDER_TOTAL,&lt;br&gt;    SALES_REP_ID SALES_REP_ID,&lt;br&gt;    ORDER_ITEM_LIST ORDER_ITEM_LIST 
;

CREATE OR REPLACE VIEW OE.OC_PRODUCT_INFORMATION
 OF PRODUCT_INFORMATION_TYP WITH OBJECT IDENTIFIER ( product_id )   AS
;  ( PRODUCT_ID,&lt;br&gt;    PRODUCT_NAME,&lt;br&gt;    PRODUCT_DESCRIPTION,&lt;br&gt;    CATEGORY_ID,&lt;br&gt;    WEIGHT_CLASS,&lt;br&gt;    WARRANTY_PERIOD,&lt;br&gt;    SUPPLIER_ID,&lt;br&gt;    PRODUCT_STATUS,&lt;br&gt;    LIST_PRICE,&lt;br&gt;    MIN_PRICE,&lt;br&gt;    CATALOG_URL,&lt;br&gt;    INVENTORY_LIST )&lt;br&gt; AS SELECT&lt;br&gt;    PRODUCT_ID PRODUCT_ID,&lt;br&gt;    PRODUCT_NAME PRODUCT_NAME,&lt;br&gt;    PRODUCT_DESCRIPTION PRODUCT_DESCRIPTION,&lt;br&gt;    CATEGORY_ID CATEGORY_ID,&lt;br&gt;    WEIGHT_CLASS WEIGHT_CLASS,&lt;br&gt;    WARRANTY_PERIOD WARRANTY_PERIOD,&lt;br&gt;    SUPPLIER_ID SUPPLIER_ID,&lt;br&gt;    PRODUCT_STATUS PRODUCT_STATUS,&lt;br&gt;    LIST_PRICE LIST_PRICE,&lt;br&gt;    MIN_PRICE MIN_PRICE,&lt;br&gt;    CATALOG_URL CATALOG_URL,&lt;br&gt;    INVENTORY_LIST INVENTORY_LIST 
;

CREATE OR REPLACE VIEW OE.ORDERS_VIEW  AS
&lt;br&gt;SELECT&lt;br&gt;  order_id,&lt;br&gt;  TO_DATE(TO_CHAR(order_date,&apos;DD-MON-YY HH:MI:SS&apos;),&apos;DD-MON-YY HH:MI:SS&apos;) ORDER_DATE,&lt;br&gt;  order_mode,&lt;br&gt;  customer_id,&lt;br&gt;  order_status,&lt;br&gt;  order_total,&lt;br&gt;  sales_rep_id,&lt;br&gt;  promotion_id&lt;br&gt;FROM orders 
;

CREATE OR REPLACE VIEW OE.PRODUCT_PRICES  AS
&lt;br&gt;SELECT category_id&lt;br&gt;,      COUNT(*)        as &quot;#_OF_PRODUCTS&quot;&lt;br&gt;,      MIN(list_price) as low_price&lt;br&gt;,      MAX(list_price) as high_price&lt;br&gt;FROM   product_information&lt;br&gt;GROUP BY category_id 
;

CREATE OR REPLACE VIEW OE.PRODUCTS  AS
&lt;br&gt;SELECT i.product_id&lt;br&gt;,      d.language_id&lt;br&gt;,      CASE WHEN d.language_id IS NOT NULL&lt;br&gt;            THEN d.translated_name&lt;br&gt;            ELSE TRANSLATE(i.product_name USING NCHAR_CS)&lt;br&gt;       END    AS product_name&lt;br&gt;,      i.category_id&lt;br&gt;,      CASE WHEN d.language_id IS NOT NULL&lt;br&gt;            THEN d.translated_description&lt;br&gt;            ELSE TRANSLATE(i.product_description USING NCHAR_CS)&lt;br&gt;       END    AS product_description&lt;br&gt;,      i.weight_class&lt;br&gt;,      i.warranty_period&lt;br&gt;,      i.supplier_id&lt;br&gt;,      i.product_status&lt;br&gt;,      i.list_price&lt;br&gt;,      i.min_price&lt;br&gt;,      i.catalog_url&lt;br&gt;FROM   product_information  i&lt;br&gt;,      product_descriptions d&lt;br&gt;WHERE  d.product_id  (+) = i.product_id&lt;br&gt;AND    d.language_id (+) = sys_context(&apos;USERENV&apos;,&apos;LANG&apos;) 
;

CREATE OR REPLACE VIEW OE.SYDNEY_INVENTORY  AS
&lt;br&gt;SELECT p.product_id&lt;br&gt;,      p.product_name&lt;br&gt;,      i.quantity_on_hand&lt;br&gt;FROM   inventories i&lt;br&gt;,      warehouses  w&lt;br&gt;,      products    p&lt;br&gt;WHERE  p.product_id = i.product_id&lt;br&gt;AND    i.warehouse_id = w.warehouse_id&lt;br&gt;AND    w.warehouse_name = &apos;Sydney&apos 
;

CREATE OR REPLACE VIEW OE.TORONTO_INVENTORY  AS
&lt;br&gt;SELECT p.product_id&lt;br&gt;,      p.product_name&lt;br&gt;,      i.quantity_on_hand&lt;br&gt;FROM   inventories i&lt;br&gt;,      warehouses  w&lt;br&gt;,      products    p&lt;br&gt;WHERE  p.product_id = i.product_id&lt;br&gt;AND    i.warehouse_id = w.warehouse_id&lt;br&gt;AND    w.warehouse_name = &apos;Toronto&apos 
;

CREATE OR REPLACE SYNONYM oe.countries FOR hr.countries;

CREATE OR REPLACE SYNONYM oe.departments FOR hr.departments;

CREATE OR REPLACE SYNONYM oe.employees FOR hr.employees;

CREATE OR REPLACE SYNONYM oe.job_history FOR hr.job_history;

CREATE OR REPLACE SYNONYM oe.jobs FOR hr.jobs;

CREATE OR REPLACE SYNONYM oe.locations FOR hr.locations;

CREATE OR REPLACE TRIGGER OE.INSERT_ORD_LINE 
    BEFORE INSERT ON OE.ORDER_ITEMS 
    FOR EACH ROW 
DECLARE&lt;br&gt;    new_line number;&lt;br&gt;  BEGIN&lt;br&gt;    SELECT (NVL(MAX(line_item_id),0)+1) INTO new_line&lt;br&gt;      FROM order_items&lt;br&gt;      WHERE order_id = :new.order_id;&lt;br&gt;    :new.line_item_id := new_line;&lt;br&gt;  END; 
/

CREATE OR REPLACE TRIGGER OE.PURCHASEORDER$xd 
    AFTER UPDATE OR DELETE ON OE.PURCHASEORDER 
    FOR EACH ROW 
BEGIN  IF (deleting) THEN xdb.xdb_pitrig_pkg.pitrig_del(&apos;OE&apos;,&apos;PURCHASEORDER&apos;, :old.sys_nc_oid$, &apos;9B7F4EF578894592B5E48A3BC249FB5F&apos; ); END IF;   IF (updating) THEN xdb.xdb_pitrig_pkg.pitrig_upd(&apos;OE&apos;,&apos;PURCHASEORDER&apos;, :old.sys_nc_oid$, &apos;9B7F4EF578894592B5E48A3BC249FB5F&apos;, user ); END IF; END; 
/

CREATE OR REPLACE TYPE BODY category_typ AS
    MEMBER FUNCTION category_describe RETURN VARCHAR2 AS 
    -- Empty PL/SQL Body 
    BEGIN
        NULL;
    END;

END;
/

CREATE OR REPLACE TYPE body

composite_category_typ AS 
    MEMBER FUNCTION category_describe RETURN VARCHAR2 AS begin&lt;br&gt;      RETURN &apos; composite_category_typ&apos;;
    &lt;
    br&gt;
END;
    &lt;
    br&gt;
END;
/

CREATE OR REPLACE TYPE body

catalog_typ AS 
    MEMBER FUNCTION getcatalogname RETURN VARCHAR2 AS begin&lt;br&gt;    -- Return the category name from the supertype&lt;br&gt;    RETURN self.category_name;&lt;br&gt;  END; 
    MEMBER FUNCTION CATEGORY_DESCRIBE 
        RETURN VARCHAR2 
    AS 
    BEGIN&lt;br&gt;    RETURN &apos; catalog_typ&apos;;
    &lt;
    br&gt;
END; 
    END;
/

CREATE OR REPLACE TYPE body

leaf_category_typ AS 
    MEMBER FUNCTION category_describe RETURN VARCHAR2 AS begin&lt;br&gt;       RETURN  &apos; leaf_category_typ&apos;;
    &lt;
    br&gt;
END;
    &lt;
    br&gt;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            10
-- CREATE INDEX                            16
-- ALTER TABLE                             20
-- CREATE VIEW                             13
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          1
-- CREATE TRIGGER                           2
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                  11
-- CREATE STRUCTURED TYPE                  20
-- CREATE STRUCTURED TYPE BODY              4
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          1
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           6
-- CREATE TABLESPACE                        0
-- CREATE USER                              3
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
